name: Daily AI News

on:
  schedule:
    - cron: '00 13 * * *'  # 9:00 AM EST daily
  workflow_dispatch:
    inputs:
      date:
        description: 'Date (YYYY-MM-DD)'
        required: false
        type: string

# Add concurrency to prevent multiple deployments running simultaneously
concurrency:
  group: "pages-deploy"
  cancel-in-progress: true

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  fetch-ai-news:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements.txt
    
    - name: Fetch AI news and generate digest
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        if [ -n "${{ github.event.inputs.date }}" ]; then
          python scripts/fetch_ai_news.py --date "${{ github.event.inputs.date }}"
        else
          python scripts/fetch_ai_news.py
        fi
    
    - name: Configure Git
      run: |
        git config --local user.email "giuseppe.concialdi@gmail.com"
        git config --local user.name "AI News Bot"
    
    - name: Commit and push changes
      run: |
        echo "Checking for new files..."
        ls -la _ai_news/ || echo "No _ai_news directory found"
        git add _ai_news/
        if git diff --staged --quiet; then
          echo "No new news digest to commit"
        else
          echo "Changes detected, committing..."
          git commit -m "AI news digest $(date '+%Y-%m-%d')"
          git push
          echo "âœ… Done"
        fi
        echo "News fetch job completed successfully"

  build:
    if: success()
    runs-on: ubuntu-latest
    needs: fetch-ai-news
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
    
    - name: Build with Jekyll
      run: |
        bundle install
        bundle exec jekyll build --destination ./_site
    
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site

  deploy:
    if: success()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4